I"ù<p>There has been a lot of information in this collection, but I wanted to be sure to provide a one-stop resource for Git. The final post in the collection is not as lengthy. However, it does contain some useful shortcuts and best practices that I‚Äôve uncovered over the years.</p>

<h2 id="git-shortcuts">Git Shortcuts</h2>

<p>I‚Äôm not going to try to provide a large list of Git shortcuts, since there are a million out ther. But here are some of the quick hits that I use daily:</p>

<ul>
  <li><code class="highlighter-rouge">git add .</code> - Adds all files in the working directory. Only use this command if you know exactly what you are adding.
    <ul>
      <li>If you are unsure what you are adding, run <code class="highlighter-rouge">git status</code>.</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">git commit -am "&lt;enter commit message"</code> - If you already have files previously tracked and commited, running this command combines the <code class="highlighter-rouge">git add</code> and <code class="highlighter-rouge">git commit</code> commands.</li>
  <li><code class="highlighter-rouge">git checkout -b &lt;enter-branch-name&gt;</code> - This command combines the <code class="highlighter-rouge">git branch "&lt;enter-branch-name&gt;</code> and <code class="highlighter-rouge">git checkout &lt;enter-branch-name&gt;</code> commands.</li>
</ul>

<h2 id="best-practices">Best Practices</h2>

<p>The last section of the collection is best practices. This list is subjective and ccertainly not exhaustive, but again, this is what I have discovered and find to work well:</p>

<h3 id="branching">Branching</h3>

<ol>
  <li>When working with branches, it is importantant to delete your branches, but not until they have been fully merged to the <code class="highlighter-rouge">master</code> branch. By design, branches are not always up to date with the <code class="highlighter-rouge">master</code> branch. So, to avoid future merge conflicts be sure to delete your merged branches.
    <ul>
      <li>Delete both the remote (Github) branch and the local branch <code class="highlighter-rouge">git branch -d &lt;branch-name&gt;</code>. Note: You can‚Äôt delete a branch you are currently on.</li>
    </ul>
  </li>
  <li>Categorize your branches. If you have code-based updates and text-based updates, seperate them into multiple branches. This makes it easier to review and you will likely run into situations where one commit is approved and one is rejected due to an error. Having two commits allows you to at least get one commit approved and merged.
    <ul>
      <li>One exception is if the text-based updates require the code-based updates to render properly. If this occurs, be sure to communicate this with the developer responsible for merging updates.</li>
    </ul>
  </li>
</ol>

<h2 id="closing-thoughts">Closing Thoughts</h2>

<p>Thanks for reading through the Git collection! Hopefully it helped answer some questions surrounding Git and gave you with the foundational skills to help you practice Git, build/host a Git profile, and understand how Git is actually used in the tech writing world.</p>

<p>Be sure to check back soon for new collections and individual posts.</p>
:ET
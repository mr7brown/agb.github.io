I"2<p>At this point in the Git Collection you should understand what it is, how it is used, and have begun using it. This post takes all the lessons learned so far and takes them a step further by looking at branching (which is typical for projects with multiple contributors).</p>

<p>By the end of the collection, you should know and be able to demonstrate ~80-90% of how technical writers work with Git. The only reason it is not 100% of the knowledge is because there will be some nuances that are different between each company. For example, at Google the Google Assistant team is fairly large and required deeper control over the code base. So instead of using Git and Github, the team developed Cider and Piper, which were essentially clones of Git and Github. As for HBO, instead of Github they use GitLab, which requires an SSH connection - so <code class="highlighter-rouge">git push</code> is a bit different.</p>

<p>It is difficult to account for the nuances and in the end, part of being a technical writer is understanding the 80% and researching the rest.</p>

<h2 id="branching">Branching</h2>

<p>When working on a team with multiple contributors a best practice is to work with branches. By default, there is a <code class="highlighter-rouge">master</code> branch that is used for the <code class="highlighter-rouge">HEAD</code>. The image below is a pretty good depiction of branching in Git.</p>

<div class="post-image-container">
    <img class="post-image" src="images/git-merge.png" />
</div>

<p>Essentially, branching allows you to work independently, while not impacting the main source of the information or code. First, let’s look at an example of how this works at HBO (and most companies), then we will go through an exercise.</p>

<h3 id="branching-example">Branching Example</h3>

<p>At HBO, I am responsible for all content updates to our Partner Hub (a site where 3rd-party partners can see our delivery requirements), and I am also responsible for front-end development/maintenance of the Partner Hub. However, there is also an Application Architecture team that is responsible for deployments, security, compliance, etc., and two other full-stack developers that also contribute to the code base.</p>

<p>At any given time, we are all working on something that impacts the code and the prod. site. For this reason, and many others, we cannot work on the <code class="highlighter-rouge">master</code> branch.</p>

<p>Instead, we create branches so that we can all work independently of each other. And once we are finished updating, we push our changes to GitLab and create a merge request. A merge request basically means that an update was made in a new branch, call it <strong>branch-a</strong>, and those updates are ready to be reviewed and then merged into the <code class="highlighter-rouge">master</code> branch.</p>

<p>The result is a workflow similar to the image below.</p>

<div class="post-image-container">
    <img class="post-image" src="images/deployment.png" />
</div>

<h3 id="creating-a-branch">Creating a Branch</h3>

<p>Let’s start creating branches!</p>

<div class="alert new-note" role="alert"><i class="fa fa-warning"></i> <b>Important:</b> A good way to practice this, is to create branches and merge them into your personal Github account.</div>

<p>We will start with the project created in <a href="/git-getting-started.html#git-exercise">Getting Started with Git</a>. Alternatively, if you have an existing Git repo, feel free to create your branches there - but skip to <strong>Step 3</strong>.</p>

<ol>
  <li>Open a new terminal window and navigate to the <code class="highlighter-rouge">&lt;new-git-repo&gt;</code> folder:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd desktop/new-git-repo
</code></pre></div>    </div>
  </li>
  <li>A good practice when starting a new terminal session in a folder is to check the status:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Checking the status tells you if files need to be commited, tracked, etc.
$ git status
</code></pre></div>    </div>
    <ul>
      <li>Prior to creating a new branch you should make sure that you have a clean working directory to avoid merge conflicts or lost work.</li>
    </ul>
  </li>
  <li>Check to see which branch you are on:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># The asterisk '*' shows you the branch you are currently on
$ git branch
</code></pre></div>    </div>
    <ul>
      <li>Since you have not created additional branches, you should only see <code class="highlighter-rouge">*master</code></li>
    </ul>
  </li>
  <li>Create a new branch:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># portfolio is only place holder, you can enter any name for the branch
$ git branch portfolio
</code></pre></div>    </div>
  </li>
  <li>Switch from the <code class="highlighter-rouge">master</code> branch to the <code class="highlighter-rouge">portfolio</code> branch:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git checkout portfolio
</code></pre></div>    </div>
    <ul>
      <li>A shortcut for creating a branch <code class="highlighter-rouge">git branch &lt;branch name&gt;</code> and switching to the branch <code class="highlighter-rouge">git checkout &lt;branch name&gt;</code> is to write `git checkout -b <branch name="">. This creates a new branch and switches to the branch in one command.</branch></li>
    </ul>
  </li>
  <li>Check to see that you are on the <code class="highlighter-rouge">portfolio branch</code>:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># The asterisk should be next to 'portfolio'
$ git branch
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="edit-push-merge-and-pull-new-branch">Edit, Push, Merge, and Pull New Branch</h2>

<p>Now that you have created a new branch and your terminal is pointed to the branch, you can create files, edit files, etc.</p>

<p>Before moving on to the rest of this section, try refering back to how to create, add, and commit updates to the repository. Don’t worry if you don’t remember or if you need to refer to the previous post. The steps are below as well.</p>

<h3 id="edit">Edit</h3>

<ol>
  <li>Check to see which branch you are on:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git branch
</code></pre></div>    </div>
    <ul>
      <li>Even though this was the last command entered, I am making this step one to establish a habit - if/when you work on complex projects with multiple branches, it is easy to forget which branch you are on and update the wrong branch.</li>
    </ul>
  </li>
  <li>Create a new file <code class="highlighter-rouge">portfolio.md</code>:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ touch portfolio.md
</code></pre></div>    </div>
    <ul>
      <li>You can also create a file and add text to it, for more on this, check out my <a href="/tech-blog.html#linux-collection-coming-soon">Linux/OSX Collection</a> for more.</li>
    </ul>
  </li>
  <li>Check to see the update:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git status
</code></pre></div>    </div>
  </li>
  <li>Tell Git to track the file and add it to the <code class="highlighter-rouge">index</code>:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add portfolio.md
</code></pre></div>    </div>
    <ul>
      <li>You can also use the command <code class="highlighter-rouge">git add .</code>. This adds all files to the Index, which is useful if you update multiple files, and don’t want to add them one by one. But you should only use that command if you are adding ALL files.</li>
    </ul>
  </li>
  <li>Commit changes:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git commit -m "&lt;enter descriptive mesage&gt;"
</code></pre></div>    </div>
    <ul>
      <li>You can combine the <code class="highlighter-rouge">git add</code> and <code class="highlighter-rouge">git commit</code> commands if the update is to a file that has been previously commited by entering <code class="highlighter-rouge">git commit -am</code>. Adding <code class="highlighter-rouge">a</code> before <code class="highlighter-rouge">m ""</code> combines the commands. Be sure to only do this if you know eexactly what you are commiting!</li>
    </ul>
  </li>
</ol>

<h3 id="push">Push</h3>

<ol>
  <li>Push commit:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git push --set-upstream origin portfolio
</code></pre></div>    </div>
    <ul>
      <li>When adding a new branch to Github, you need to enter <code class="highlighter-rouge">--set-upstream origin &lt;branch name&gt;</code> to <code class="highlighter-rouge">git push</code>. Subsequent pushes do not require <code class="highlighter-rouge">--set upstream origin</code>, only <code class="highlighter-rouge">git push</code>.</li>
    </ul>
  </li>
</ol>

<h3 id="merge">Merge</h3>

<p>Before the updates can be seen on Github, you need to merge the changes from the <code class="highlighter-rouge">portfolio</code> branch to the <code class="highlighter-rouge">master</code> branch on Github.</p>

<p>To begin, Go to the Github repo for the <code class="highlighter-rouge">&lt;new-git-repo&gt;</code>. You should see a <strong>Compare &amp; pull request</strong> button near the top of the page:</p>

<div class="post-image-container">
    <img class="post-image" src="images/github-merge.png" />
</div>

<ol>
  <li>Click the <strong>Compare and pull request</strong> button.</li>
  <li>Enter a descriptive title for the commit, as well as a detailed description of what is in the commit - then click the <strong>Create pull request</strong> button.</li>
  <li>Click the <strong>Merge pull request</strong> button, followed by the <strong>Confirm merge request</strong> button.
    <ul>
      <li>You won’t have merge conflicts since you are not merging multiple branches.</li>
    </ul>
  </li>
</ol>

<p>You should now see a success message, which means that your branch has successfully been merged to the master branch on Github. But, now you need your local <code class="highlighter-rouge">working directory</code> to match the master branch on Github.</p>

<h3 id="pull">Pull</h3>

<p>To ensure that your local <code class="highlighter-rouge">master</code> branch is in sync with the remote Github branch, you need to create a pull request. This request essentially takes the master branch from Github and compares it to your local <code class="highlighter-rouge">master</code> branch. If there are updates on the remote branch, the <code class="highlighter-rouge">pull</code> request makes the same updates to your local <code class="highlighter-rouge">master</code> branch.</p>

<ol>
  <li>From the <code class="highlighter-rouge">&lt;new-git-repo&gt;</code>, check the status and branch:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git status
$ git branch
</code></pre></div>    </div>
    <ul>
      <li>You should have a clean directory and be on the <code class="highlighter-rouge">portfolio</code> branch.</li>
    </ul>
  </li>
  <li>Switch to the master directory:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git checkout master
</code></pre></div>    </div>
  </li>
  <li>Pull the remote Github <code class="highlighter-rouge">master</code> branch into your local <code class="highlighter-rouge">working directory</code>:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git pull
</code></pre></div>    </div>
  </li>
  <li>Check the status:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git status
</code></pre></div>    </div>
  </li>
</ol>

<p>You should now have a local file system for the <code class="highlighter-rouge">&lt;new-git-repo&gt;</code> that matches what is on Github.</p>

<h3 id="branching-best-practices">Branching Best Practices</h3>

<p>This final section is admittedly subjective, and soley based on my personal experience over the last few years.</p>

<ol>
  <li>Categorize your branches. For example, if you have a UI/UX update and a content update, create two seperate branches. It is common to receive approval on one change but not on the other. But since the updates are made in the same commit, neither can be merged.</li>
  <li></li>
</ol>

<h2 id="closing-thoughts">Closing Thoughts</h2>

:ET
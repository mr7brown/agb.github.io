I"’<p>In this post we will look at Git, the top version control tool used by tech companies. While many of you may be familiar with using Git or have at least heard of it, the purpose of the Git collection is to provide you with the information and skills required from a tech writing standpoint. Most guides are created with the devloper in mind and contain more information than tech writers will ever use.</p>

<p>From a chronological standpoint, this post includes:</p>

<ol>
  <li>An overview of Git and how technical writers use it.</li>
  <li>Introduction to the four Git environments.</li>
  <li>Prep for part 2/3 of the Git Collection.</li>
</ol>

<div class="alert new-note" role="alert"><i class="fa fa-warning"></i> <b>Important:</b> The installation part of this post is for Mac OS users, but all other sections, including commands, are the same for Mac OS and Windows.</div>

<h2 id="git-overview">Git Overview</h2>

<p>Git is a version control tool that interacts with a remote repository and your computerâ€™s local file system, and while it is not the only version control tool, it is, by far, the most popular tool used by tech companies today.</p>

<p>From a technical writing standpoint, Git is used similar to the ways developers or engineers use it. The main difference is that the workflow is simplified (since most of the advanced functions are not needed). This simplification allows technical writers to focus on the primary functions:</p>

<ol>
  <li>Collaborative workflow.</li>
  <li>Version control.</li>
  <li>Efficiency.</li>
</ol>

<p>Below is an example of the Git environment, as well as an example of a common technical writing workflow with Git and a docs as code approach.</p>

<div class="post-image-container">
    <img class="post-image" src="images/git-flow.png" />
</div>

<p>While this may or may not seem simplistic, there is a method to this. In my experience, technical writers begin to understand the commands for Git, but they only seem to understand the four environments when everything is working as intented - AKA <code class="highlighter-rouge">git pull</code>, <code class="highlighter-rouge">git add</code>, <code class="highlighter-rouge">git commit</code>, <code class="highlighter-rouge">git push</code>. When something breaks (and something will), they have a difficult time understanding where in the chain something broke.</p>

<p>I think having a strong conceptual model makes problem solving, working in teams with multiple writers, and becoming a power user easier.</p>

<h3 id="working-directory">Working Directory</h3>

<p>The first enviromment, or the <code class="highlighter-rouge">working directory</code>, can be defined as the computerâ€™s local file system. Git interacts with a computerâ€™s local file system by keeping an index of the contents of a folder - better known as a repository.</p>

<p>The screenshot below is of my local file system and the repository used for my website.</p>

<div class="post-image-container">
    <img class="post-image" src="images/local.png" />
</div>

<p>For Git to work, you must initiate it within a folder by running:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git init
</code></pre></div></div>

<p>Once you initialize a repository, Git takes a snapshot of the folder and begins monitoring it by a process called indexing.</p>

<h3 id="index">Index</h3>

<p>To understand indexing, you should think of it as Git comparing two seperate points <code class="highlighter-rouge">HEAD</code> and <code class="highlighter-rouge">working directory</code>. Letâ€™s think of practical example using a bookshelf. After first initializing a repository, Git takes a snapshot of the bookshelf (<code class="highlighter-rouge">working directory</code>) at that present time.</p>

<p>This snapshot becomes known as the <code class="highlighter-rouge">HEAD</code>. In other words, the <code class="highlighter-rouge">HEAD</code> is set to the last commit.</p>

<p>Sticking with the bookshelf example, say that in our initial commit (<code class="highlighter-rouge">git init</code>) we had 10 files, and then we add two more. Through indexing, Git compares the <code class="highlighter-rouge">HEAD</code> (10 files) to the currrent <code class="highlighter-rouge">working directory</code> (12 files) and notices that there are more files. This difference becomes a differential - similar to the screenshot below.</p>

<div class="post-image-container">
    <img class="post-image" src="images/diff.png" />
</div>

<p>Put simply, Git is looking for changes to the folder:</p>

<ul>
  <li>Addition/deletion of a file or folder.</li>
  <li>Modification of text in a file.</li>
</ul>

<h3 id="head">Head</h3>

<p>As discussed, the <code class="highlighter-rouge">HEAD</code> is the snapshot of the last commited change. But, unlike a Word document that only tracks the current state, Git indexs each commit. Meaning, each time you run</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$git commit -m "&lt;enter commit message&gt;"
</code></pre></div></div>

<p>you essentially create a new record, which can be referenced or reverted at any time (more on this in future posts).</p>

<h3 id="remote-repository">Remote Repository</h3>

<p>While having an index of files, folders, etc. on your personal computer is great and a step up from having an unmanaged file system, you can take your local directory further by creating a <code class="highlighter-rouge">remote repository</code>. As you may expect, a <code class="highlighter-rouge">remote repository</code> is essentially a web-based storage location for your files. However, remote repositories like Github allow you to not only store files, it can also become a platform for hosting a website (Git, Github, and Github pages are what I use for workflow on this site).</p>

<h2 id="closing-thoughts">Closing Thoughts</h2>

<p>By now, you should have a solid understanding of how Git is used. In the next post, <a href="/git-getting-started">Getting Started w/ Git</a>, we will create a remote repository and begin using it just like developers do. We will also begin creating branches, go over some common interview questions, and discuss some essentials for managing workflow.</p>

<p>In the last post of this collection, <a href="/git-advanced">Advanced Git Commands</a>, we will look at:</p>

<ol>
  <li>How and when to delete branches</li>
  <li>Rolling back commits</li>
  <li>Becomming a power user</li>
</ol>

:ET